import java_cup.runtime.*;
import java.io.*;

/* Código para conectar com o scanner */
parser code {:
    scanner s;
    parser(scanner s){ this.s=s; }

    public void report_error(String message, Object info) {
        System.err.println("Erro de Sintaxe: " + message);
    }
:};

scan with {: return s.next_token(); :};

/* --- Terminais (Tokens) --- */
// Operadores
terminal            PLUS, MINUS, TIMES, DIVIDE, GT, LT, EQ, NEQ;
terminal            ASSIGN; // Token para o operador '='
// Delimitadores
terminal            SEMI, LPAREN, RPAREN, LBRACE, RBRACE;
// Keywords e Tipos
terminal            IF;
terminal String     ID;
terminal Integer    NUMBER;

/* --- Não-Terminais --- */
non terminal        program, stmt_list, stmt;
non terminal        expr;

/* --- Precedência de Operadores --- */
// Define a ordem de avaliação das expressões
precedence right    ASSIGN; // Atribuição tem precedência baixa e é associativa à direita
precedence left     EQ, NEQ, GT, LT;
precedence left     PLUS, MINUS;
precedence left     TIMES, DIVIDE;

/* --- A Gramática --- */

program   ::= stmt_list;

stmt_list ::= stmt_list stmt
              |
              /* pode ser vazio */
              ;

stmt      ::= ID:var ASSIGN expr:val SEMI // Regra para validar a atribuição
              {: System.out.println("Formato de atribuicao VALIDO."); :}
              |
              expr:e SEMI
              {: System.out.println("Formato de expressao VALIDO."); :}
              |
              IF LPAREN expr RPAREN stmt
              {: System.out.println("Formato de 'if' VALIDO."); :}
              |
              LBRACE stmt_list RBRACE
              {: System.out.println("Formato de bloco '{}' VALIDO."); :}
              |
              SEMI // Permite ponto e vírgula extra (declaração vazia)
              {: System.out.println("Formato de declaracao vazia VALIDO."); :}
              ;

expr      ::= expr:e1 PLUS expr:e2
              |
              expr:e1 MINUS expr:e2
              |
              expr:e1 TIMES expr:e2
              |
              expr:e1 DIVIDE expr:e2
              |
              expr:e1 EQ expr:e2
              |
              expr:e1 NEQ expr:e2
              |
              expr:e1 GT expr:e2
              |
              expr:e1 LT expr:e2
              |
              LPAREN expr:e RPAREN {: RESULT = e; :}
              |
              ID:i                   {: RESULT = i; :}
              |
              NUMBER:n               {: RESULT = n; :}
              ;
